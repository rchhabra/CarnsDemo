#
# Import the Solr configuration for the Travel store
#
$serverConfigName = airlineSolrServerConfig
$indexConfigName = airlineSolrIndexConfig
$searchConfigName = airlinePageSize
$facetSearchConfigName = airlineIndex
$facetSearchConfigDescription = Airline Solr Index
$searchIndexNamePrefix = airline
$solrIndexedType = airlineIndexedType
$indexBaseSite = airline
$indexLanguages = en
$indexCurrencies = GBP


#
# Setup the Solr server, indexer, and search configs
#

# Create the solr server configuration
INSERT_UPDATE SolrServerConfig; name[unique = true]; mode(code); embeddedMaster
; $serverConfigName ; standalone ; false

INSERT_UPDATE SolrEndpointUrl; solrServerConfig(name)[unique = true]; url[unique = true]; master[unique = true, default = false]
; $serverConfigName ; http://localhost:8983/solr ; true

# Create the solr indexer configuration
INSERT_UPDATE SolrIndexConfig; name[unique = true]; batchSize; numberOfThreads; indexMode(code);
; $indexConfigName ; 100 ; 1 ; TWO_PHASE ;

# Create the faceted search configuration
INSERT_UPDATE SolrSearchConfig; description[unique = true]; pageSize; legacyMode
; $searchConfigName ; 20 ; false

INSERT_UPDATE SolrIndexedTypeDefaultSortOrderMapping; indexedType[unique = true]; defaultSortOrder
; TransportOffering ; code

#
# Setup the indexed types, their properties, and the update queries
#

# Declare the indexed type Product
INSERT_UPDATE SolrIndexedType; identifier[unique = true]; type(code); variant; sorts(&sortRefID)
; $solrIndexedType ; TransportOffering ; false ; sortRef1

INSERT_UPDATE SolrFacetSearchConfig; name[unique = true]; description; indexNamePrefix; languages(isocode); currencies(isocode); solrServerConfig(name); solrSearchConfig(description); solrIndexConfig(name); solrIndexedTypes(identifier); enabledLanguageFallbackMechanism
; $facetSearchConfigName ; $facetSearchConfigDescription ; $searchIndexNamePrefix ; $indexLanguages ; $indexCurrencies ; $serverConfigName ; $searchConfigName ; $indexConfigName ; $solrIndexedType ; true

UPDATE BaseSite; uid[unique = true]; solrFacetSearchConfiguration(name)
; $indexBaseSite ; $facetSearchConfigName

# Define price range set
INSERT_UPDATE SolrValueRangeSet; name[unique = true]; qualifier; type; solrValueRanges(&rangeValueRefID)

# Define price ranges
INSERT_UPDATE SolrValueRange; &rangeValueRefID; solrValueRangeSet(name)[unique = true]; name[unique = true]; from; to


# Non-facet properties
INSERT_UPDATE SolrIndexedProperty; solrIndexedType(identifier)[unique = true]; name[unique = true]; type(code); sortableType(code); currency[default = false]; localized[default = false]; multiValue[default = false]; useForSpellchecking[default = false]; useForAutocomplete[default = false]; fieldValueProvider; valueProviderParameter
; $solrIndexedType ; itemtype                         ; string ; ; ;      ; ; ; ;                                                            ;
; $solrIndexedType ; code                             ; string ; ; ;      ; ; ; ; springELValueProvider                                      ; getCode()
; $solrIndexedType ; number                           ; text   ; ; ; true ; ; ; ;                                                            ;
; $solrIndexedType ; duration                         ; string ; ; ;      ; ; ; ;                                                            ;
; $solrIndexedType ; type                             ; string ; ; ;      ; ; ; ; springELValueProvider                                      ; getType().getCode()
; $solrIndexedType ; travelSectorCode                 ; string ; ; ;      ; ; ; ; springELValueProvider                                      ; getTravelSector() != null ? getTravelSector().getCode() : null
; $solrIndexedType ; originTerminalCode               ; string ; ; ;      ; ; ; ; springELValueProvider                                      ; getOriginTerminal() != null ? getOriginTerminal().getCode() : null
; $solrIndexedType ; destinationTerminalCode          ; string ; ; ;      ; ; ; ; springELValueProvider                                      ; getDestinationTerminal() != null ? getDestinationTerminal().getCode() : null
; $solrIndexedType ; originLocationCity               ; string ; ; ; true ; ; ; ; transportOfferingOriginLocationCityValueProvider           ;
; $solrIndexedType ; originLocationCountry            ; string ; ; ; true ; ; ; ; transportOfferingOriginLocationCountryValueProvider        ;
; $solrIndexedType ; destinationLocationCity          ; string ; ; ; true ; ; ; ; transportOfferingDestinationLocationCityValueProvider      ;
; $solrIndexedType ; destinationLocationCountry       ; string ; ; ; true ; ; ; ; transportOfferingDestinationLocationCountryValueProvider   ;
; $solrIndexedType ; departureTime                    ; date   ; ; ;      ; ; ; ;                                                            ;
; $solrIndexedType ; arrivalTime                      ; date   ; ; ;      ; ; ; ;                                                            ;
; $solrIndexedType ; originLocationName               ; string ; ; ; true ; ; ; ; springELValueProvider                                      ; getTravelSector() != null ? getTravelSector().getOrigin().getLocation().getName(#lang) : null
; $solrIndexedType ; destinationLocationName          ; string ; ; ; true ; ; ; ; springELValueProvider                                      ; getTravelSector() != null ? getTravelSector().getDestination().getLocation().getName(#lang) : null
; $solrIndexedType ; originLocationHierarchy          ; string ; ; ;      ; ; ; ; transportOfferingOriginLocationHierarchyValueProvider      ;
; $solrIndexedType ; destinationLocationHierarchy     ; string ; ; ;      ; ; ; ; transportOfferingDestinationLocationHierarchyValueProvider ;
; $solrIndexedType ; originTransportFacilityName      ; string ; ; ; true ; ; ; ; springELValueProvider                                      ; getTravelSector().getOrigin().getName(#lang)
; $solrIndexedType ; destinationTransportFacilityName ; string ; ; ; true ; ; ; ; springELValueProvider                                      ; getTravelSector().getDestination().getName(#lang)
; $solrIndexedType ; vehicleInformationName           ; string ; ; ; true ; ; ; ; springELValueProvider                                      ; getTransportVehicle().getTransportVehicleInfo().getName(#lang)
; $solrIndexedType ; vehicleInformationCode           ; string ; ; ; true ; ; ; ; springELValueProvider                                      ; getTransportVehicle().getTransportVehicleInfo().getCode()
; $solrIndexedType ; departureTimeZoneId              ; string ; ; ;      ; ; ; ; springELValueProvider                                      ; getTravelSector().getOrigin().getPointOfService().size() > 0 ? getTravelSector().getOrigin().getPointOfService().get(0).getTimeZoneId() : "UTC"
; $solrIndexedType ; arrivalTimeZoneId                ; string ; ; ;      ; ; ; ; springELValueProvider                                      ; getTravelSector().getDestination().getPointOfService().size() > 0 ? getTravelSector().getDestination().getPointOfService().get(0).getTimeZoneId() : "UTC"
; $solrIndexedType ; travelProvider                   ; string ; ; ;      ; ; ; ; springELValueProvider                                      ; getTravelProvider().getCode()


# Category fields
INSERT_UPDATE SolrIndexedProperty; solrIndexedType(identifier)[unique = true]; name[unique = true]; type(code); localized[default = false]; multiValue[default = true]; categoryField[default = true]; useForSpellchecking[default = false]; useForAutocomplete[default = false]; fieldValueProvider


# Category facets
INSERT_UPDATE SolrIndexedProperty; solrIndexedType(identifier)[unique = true]; name[unique = true]; type(code); multiValue[default = true]; facet[default = true]; facetType(code); facetSort(code); priority; visible; categoryField[default = true]; fieldValueProvider; facetDisplayNameProvider; topValuesProvider


# Other facet properties
INSERT_UPDATE SolrIndexedProperty; solrIndexedType(identifier)[unique = true]; name[unique = true]; type(code); sortableType(code); currency[default = false]; localized[default = false]; multiValue[default = false]; facet[default = true]; facetType(code); facetSort(code); ftsWildcardQuery[default = false]; priority; visible; useForSpellchecking[default = false]; useForAutocomplete[default = false]; fieldValueProvider; valueProviderParameter; facetDisplayNameProvider; customFacetSortProvider; topValuesProvider; rangeSets(name)
; $solrIndexedType ; departureDate                ; string ; ; ; ;      ; ; MultiSelectOr  ; Count ;      ; 10000 ; true ; ; ; customDateValueProvider                               ;                                              ; ; ; ;
; $solrIndexedType ; originTransportFacility      ; string ; ; ; ;      ; ; MultiSelectOr  ; Alpha ;      ; 10000 ; true ; ; ; springELValueProvider                                 ; getTravelSector().getOrigin().getCode()      ; ; ; ;
; $solrIndexedType ; destinationTransportFacility ; string ; ; ; ;      ; ; MultiSelectOr  ; Alpha ;      ; 10000 ; true ; ; ; springELValueProvider                                 ; getTravelSector().getDestination().getCode() ; ; ; ;
; $solrIndexedType ; activity                     ; string ; ; ; ; true ; ; MultiSelectOr  ; Alpha ;      ; 10000 ; true ; ; ; transportOfferingActivitiesValueProvider              ;                                              ; ; ; ;
; $solrIndexedType ; originLocationData           ; text   ; ; ; ; true ; ; MultiSelectAnd ; Alpha ; true ; 10000 ; true ; ; ; transportOfferingOriginLocationDataValueProvider      ;                                              ; ; ; ;
; $solrIndexedType ; destinationLocationData      ; text   ; ; ; ; true ; ; MultiSelectAnd ; Alpha ; true ; 10000 ; true ; ; ; transportOfferingDestinationLocationDataValueProvider ;                                              ; ; ; ;
; $solrIndexedType ; allOriginsToDestination      ; text   ; ; ; ; true ; ; MultiSelectAnd ; Alpha ;      ; 10000 ; true ; ; ; transportOfferingAllOriginsToDestinationValueProvider ;                                              ; ; ; ;
; $solrIndexedType ; status                       ; string ; ; ; ;      ; ; MultiSelectOr  ; Alpha ;      ; 10000 ; true ; ; ; springELValueProvider                                 ; getStatus()                                  ; ; ; ;

# Create the queries that will be used to extract data for Solr
INSERT_UPDATE SolrIndexerQuery; solrIndexedType(identifier)[unique = true]; identifier[unique = true]; type(code); injectCurrentDate[default = true]; injectCurrentTime[default = true]; injectLastIndexTime[default = true]; query; user(uid); active[default = true]
; $solrIndexedType ; $searchIndexNamePrefix-fullQuery   ; full   ; ; ; false ; "SELECT {PK} FROM {TransportOffering} where {active} = ?active"                                      ; anonymous ;
; $solrIndexedType ; $searchIndexNamePrefix-updateQuery ; update ; ; ;       ; "SELECT {PK} FROM {TransportOffering} where {active} = ?active and {modifiedtime} >= ?lastIndexTime" ; anonymous ;

# Define the available sorts
INSERT_UPDATE SolrSort; &sortRefID; indexedType(identifier)[unique = true]; code[unique = true]; useBoost
; sortRef1 ; $solrIndexedType ; departureTime-asc ; false

# Define the sort fields
INSERT_UPDATE SolrSortField; sort(indexedType(identifier), code)[unique = true]; fieldName[unique = true]; ascending[unique = true]
; $solrIndexedType:departureTime-asc ; departureTime ; true
